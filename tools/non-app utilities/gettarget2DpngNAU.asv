function target = gettarget2DpngNAU(filename,target,im,fig)
%% Inputs
%   filename
%   target
%       xStep_m
%       yStep_m
%       xOffset_m
%       yOffset_m
%       zOffset_m

%% Load the iamge in
tMatrix = imread(filename);
tMatrix = tMatrix(:,:,1);
tMatrix(tMatrix>0) = 1;
tMatrix = ~tMatrix;
tMatrix = fliplr(tMatrix);

figure
imshow(tMatrix)
hold on
b = bwboundaries(tMatrix');
boundaries.x_coord_m = [];
boundaries.y_coord_m = [];

for indB = 1:length(b)
    temp = b{indB};
    boundaries.x_coord_m = [boundaries.x_coord_m,temp(:,1)'];
    boundaries.y_coord_m = [boundaries.y_coord_m,temp(:,2)'];
end

plot(boundaries.x_coord_m,boundaries.y_coord_m,'o')

%% Crete the image domain
[target.sizeY,target.sizeX] = size(tMatrix);
xAxisT = target.xStep_m * (-(target.sizeX-1)/2 : (target.sizeX-1)/2);
yAxisT = target.yStep_m * (-(target.sizeY-1)/2 : (target.sizeY-1)/2);

xAxisT = xAxisT + target.xOffset_m;
yAxisT = yAxisT + target.yOffset_m;
zAxisT = target.zOffset_m;

[zT,xT,yT] = meshgrid(zAxisT,xAxisT,yAxisT);
target.xyz_m = [xT,yT,zT]; % xPoint x 3 (x-y-z) x yPoint;
target.xyz_m = reshape(permute(target.xyz_m,[1 3 2]),[],3);

indT = rot90(tMatrix,-1)==true;
target.xyz_m = single(target.xyz_m(indT,:));

target.numTarget = size(target.xyz_m,1);

boundaries.x_coord_m = xAxisT(boundaries.x_coord_m);
boundaries.y_coord_m = yAxisT(boundaries.y_coord_m);

%% Create ideal 2D image
target.ideal2D = single(zeros(size(tMatrix')));
target.x_m = xAxisT';
target.y_m = yAxisT;
target.o_x = 0.5e-3;
target.o_y = 0.5e-3;

x_m = linspace(im.x_m(1),im.x_m(end),8*length(im.x_m))';
y_m = linspace(im.y_m(1),im.y_m(end),8*length(im.y_m));
target.ideal2D = single(zeros(length(x_m),length(y_m)));
for indTarget = 1:l
%     temp = single(exp(-(target.o_x^(-2))*(target.x_m - target.xyz_m(indTarget,1)).^2-(target.o_y^(-2))*(target.y_m - target.xyz_m(indTarget,2)).^2));
%     temp = single(exp(-(target.o_x^(-2))*(x_m - target.xyz_m(indTarget,1)).^2-(target.o_y^(-2))*(y_m - target.xyz_m(indTarget,2)).^2));
    temp = single(exp(-(target.o_x^(-2))*(x_m - boundaries.x_coord_m(indTarget)).^2-(target.o_y^(-2))*(y_m - boundaries.y_coord_m(indTarget)).^2));
%     figure
%     mesh(temp','FaceColor','interp')
%     temp = temp/max(temp(:));
    target.ideal2D = target.ideal2D + temp;
end
target.ideal2D = imresize(target.ideal2D,1/8);

%% Show the reflectivity function
h = fig.Target2D.h;
temp = target.xyz_m;
scatter(h,temp(:,1),temp(:,2),'.')
% mesh(h,target.x_m,target.y_m,target.ideal2D','FaceColor','interp')
mesh(h,im.x_m,im.y_m,target.ideal2D','FaceColor','interp')
view(2)
xlabel(h,"x (m)")
ylabel(h,"y (m)")
title(h,"Original Reflectivity Function");



end